MaterialDef MatCap {
 
    MaterialParameters {
        // MatCap
        Color Multiply_Color
        Texture2D DiffuseMap
        Texture2D NormalMap
        Float ChessSize

        // For hardware skinning
        Int NumberOfBones
        Matrix4Array BoneMatrices

        //Shadows
        Int FilterMode
        Boolean HardwareShadows

        Texture2D ShadowMap0
        Texture2D ShadowMap1
        Texture2D ShadowMap2
        Texture2D ShadowMap3
        //pointLights
        Texture2D ShadowMap4
        Texture2D ShadowMap5
        
        Float ShadowIntensity
        Vector4 Splits
        Vector2 FadeInfo

        Matrix4 LightViewProjectionMatrix0
        Matrix4 LightViewProjectionMatrix1
        Matrix4 LightViewProjectionMatrix2
        Matrix4 LightViewProjectionMatrix3
        //pointLight
        Matrix4 LightViewProjectionMatrix4
        Matrix4 LightViewProjectionMatrix5
        Vector3 LightPos
        Vector3 LightDir

        Float PCFEdge

        Float ShadowMapSize        
     
    }
 
    Technique {
        VertexShader GLSL150:   Shaders/MatCap.vert
        FragmentShader GLSL150: Shaders/MatCap.frag
 
        WorldParameters {
            WorldViewProjectionMatrix
            NormalMatrix
            WorldViewMatrix
        }
 
        Defines {
            NORMALMAP : NormalMap
            CHESS_SIZE : ChessSize
            MULTIPLY_COLOR : Multiply_Color
            NUM_BONES : NumberOfBones
        }
    }

    Technique {
        VertexShader GLSL110:   Shaders/MatCap.vert
        FragmentShader GLSL110: Shaders/MatCap.frag
 
        WorldParameters {
            WorldViewProjectionMatrix
            NormalMatrix
            WorldViewMatrix
        }
 
        Defines {
            NORMALMAP : NormalMap
            CHESS_SIZE : ChessSize
            MULTIPLY_COLOR : Multiply_Color
            NUM_BONES : NumberOfBones
        }
    }
}
